using System.IO;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

[System.Serializable]
public class DialogueLine
{
    public string name;      // –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    public string text;      // –†–µ–ø–ª–∏–∫–∞
    public string emotion;   // –≠–º–æ—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Å–ø—Ä–∞–π—Ç–∞
}

[System.Serializable]
public class DialogueOption
{
    public string text;       // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    public string nextNode;   // –ö –∫–∞–∫–æ–º—É —É–∑–ª—É –≤–µ—Å—Ç–∏
}

[System.Serializable]
public class DialogueNode
{
    public string id;                  // ID —É–∑–ª–∞
    public string background;          // –§–æ–Ω —Å—Ü–µ–Ω—ã
    public DialogueLine[] dialogue;    // –†–µ–ø–ª–∏–∫–∏
    public DialogueOption[] options;   // –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
}

public class DialogueManager : MonoBehaviour
{
    [Header("UI —ç–ª–µ–º–µ–Ω—Ç—ã")]
    public TextMeshProUGUI nameText;
    public TextMeshProUGUI dialogueText;
    public GameObject optionsContainer;
    public GameObject optionButtonPrefab;

    [Header("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")]
    public Image toothFairyImage;       // üßö‚Äç‚ôÇÔ∏è –ó—É–±–Ω–∞—è —Ñ–µ—è
    public Image noahImage;             // üë¶ –ù–æ–∞
    public Image backgroundImage;       // üñº –§–æ–Ω —Å—Ü–µ–Ω—ã

    private DialogueNode currentNode;
    private int dialogueIndex = 0;

    void Start()
    {
        LoadNode("start");
    }

    void LoadNode(string nodeId)
    {
        string path = Path.Combine(Application.streamingAssetsPath, nodeId + ".json");
        string json = File.ReadAllText(path);
        currentNode = JsonUtility.FromJson<DialogueNode>(json);
        dialogueIndex = 0;

        // üñº –°–º–µ–Ω–∞ —Ñ–æ–Ω–∞
        if (backgroundImage != null && !string.IsNullOrEmpty(currentNode.background))
        {
            Sprite bgSprite = Resources.Load<Sprite>($"Backgrounds/{currentNode.background}");
            if (bgSprite != null)
            {
                backgroundImage.sprite = bgSprite;
            }
            else
            {
                Debug.LogWarning($"–§–æ–Ω '{currentNode.background}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/Backgrounds/");
            }
        }

        ShowNextLine();
        ClearOptions();
    }

    void ShowNextLine()
    {
        if (dialogueIndex < currentNode.dialogue.Length)
        {
            DialogueLine line = currentNode.dialogue[dialogueIndex];

            nameText.text = line.name;
            dialogueText.text = line.text;

            // üß† –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–º–µ–Ω–∏—Ç—å —ç–º–æ—Ü–∏—é
            UpdateCharacterSprite(line.name, line.emotion);

            dialogueIndex++;
        }
        else
        {
            ShowOptions();
        }
    }

    void UpdateCharacterSprite(string characterName, string emotion)
    {
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–æ–∏—Ö, –∞ –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ
        if (toothFairyImage != null) toothFairyImage.enabled = false;
        if (noahImage != null) noahImage.enabled = false;

        if (characterName == "–ó—É–±–Ω–∞—è –§–µ—è" && toothFairyImage != null)
        {
            toothFairyImage.enabled = true;
            if (!string.IsNullOrEmpty(emotion))
            {
                Sprite sprite = Resources.Load<Sprite>($"Characters/ToothFairy/{emotion}");
                if (sprite != null)
                {
                    toothFairyImage.sprite = sprite;
                }
                else
                {
                    Debug.LogWarning($"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø—Ä–∞–π—Ç —ç–º–æ—Ü–∏–∏ '{emotion}' –¥–ª—è –ó—É–±–Ω–æ–π –§–µ–∏ –≤ Resources/Characters/ToothFairy/");
                }
            }
        }
        else if (characterName == "–ù–æ–∞" && noahImage != null)
        {
            noahImage.enabled = true;
            if (!string.IsNullOrEmpty(emotion))
            {
                Sprite sprite = Resources.Load<Sprite>($"Characters/Noah/{emotion}");
                if (sprite != null)
                {
                    noahImage.sprite = sprite;
                }
                else
                {
                    Debug.LogWarning($"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø—Ä–∞–π—Ç —ç–º–æ—Ü–∏–∏ '{emotion}' –¥–ª—è –ù–æ–∞ –≤ Resources/Characters/Noah/");
                }
            }
        }
    }

    void ClearOptions()
    {
        foreach (Transform child in optionsContainer.transform)
            Destroy(child.gameObject);
    }

    void ShowOptions()
    {
        ClearOptions();

        if (currentNode.options == null || currentNode.options.Length == 0)
        {
            nameText.text = "";
            dialogueText.text += "\n\n[–ö–æ–Ω–µ—Ü]";
            return;
        }

        foreach (var option in currentNode.options)
        {
            GameObject btnObj = Instantiate(optionButtonPrefab, optionsContainer.transform);
            TextMeshProUGUI btnText = btnObj.GetComponentInChildren<TextMeshProUGUI>();
            btnText.text = option.text;

            Button btn = btnObj.GetComponent<Button>();
            btn.onClick.AddListener(() => LoadNode(option.nextNode));
        }
    }

    public void OnNextButton()
    {
        ShowNextLine();
    }
}
